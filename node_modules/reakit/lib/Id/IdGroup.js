'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var IdProvider = require('./IdProvider.js');
var createComponent = require('reakit-system/createComponent');
var createHook = require('reakit-system/createHook');
var Box = require('../Box/Box.js');
var _rollupPluginBabelHelpers = require('../_rollupPluginBabelHelpers-a1eb266e.js');
require('reakit-utils/useSealedState');
var IdState = require('./IdState.js');

var unstable_useIdGroup = createHook.createHook({
  name: "IdGroup",
  compose: Box.useBox,
  useState: IdState.unstable_useIdState,
  useOptions: function useOptions(options, htmlProps) {
    var generateId = React.useContext(IdProvider.unstable_IdContext);

    var _React$useState = React.useState(function () {
      return htmlProps.id || options.id || options.baseId || generateId();
    }),
        baseId = _React$useState[0]; // If there's useIdState and IdGroup has received a different id, then set
    // the baseId on the state.


    if (options.unstable_setBaseId && baseId !== options.baseId) {
      options.unstable_setBaseId(baseId);
    }

    return _rollupPluginBabelHelpers._objectSpread2({}, options, {
      baseId: baseId
    });
  }
});
var unstable_IdGroup = createComponent.createComponent({
  as: "div",
  useHook: unstable_useIdGroup
});

exports.unstable_IdGroup = unstable_IdGroup;
exports.unstable_useIdGroup = unstable_useIdGroup;
