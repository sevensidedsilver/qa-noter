'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var warning = require('reakit-utils/warning');
var React = require('react');
var createComponent = require('reakit-system/createComponent');
var createHook = require('reakit-system/createHook');
require('../Box/Box.js');
var _rollupPluginBabelHelpers = require('../_rollupPluginBabelHelpers-a1eb266e.js');
var mergeRefs = require('reakit-utils/mergeRefs');
require('reakit-utils/tabbable');
require('reakit-utils/hasFocusWithin');
var Tabbable = require('../Tabbable/Tabbable.js');
var removeIndexFromArray = require('reakit-utils/removeIndexFromArray');
var useAllCallbacks = require('reakit-utils/useAllCallbacks');
require('reakit-utils/useSealedState');
var CheckboxState = require('./CheckboxState.js');
var useLiveRef = require('reakit-utils/useLiveRef');

function useIndeterminateState(checkboxRef, options) {
  React.useEffect(function () {
    if (!checkboxRef.current) {
      process.env.NODE_ENV !== "production" ? warning.warning(options.state === "indeterminate", "[reakit/Checkbox]", "Can't set indeterminate state because `ref` wasn't passed to component.", "See https://reakit.io/docs/checkbox/#indeterminate-state") : void 0;
      return;
    }

    if (options.state === "indeterminate") {
      checkboxRef.current.indeterminate = true;
    } else if (checkboxRef.current.indeterminate) {
      checkboxRef.current.indeterminate = false;
    }
  }, [options.state, checkboxRef]);
}

function useDelayedEvent(event) {
  var eventRef = useLiveRef.useLiveRef(event);

  var _React$useState = React.useState(null),
      delayedEvent = _React$useState[0],
      setDelayedEvent = _React$useState[1];

  React.useEffect(function () {
    if (delayedEvent && eventRef.current) {
      eventRef.current(delayedEvent);
      setDelayedEvent(null);
    }
  }, [delayedEvent]);
  return function (syntheticEvent) {
    syntheticEvent.persist();
    setDelayedEvent(syntheticEvent);
  };
}

function getChecked(options) {
  var isBoolean = typeof options.value === "undefined";

  if (typeof options.checked !== "undefined") {
    return options.checked;
  }

  if (isBoolean) {
    return Boolean(options.state);
  }

  var state = Array.isArray(options.state) ? options.state : [];
  return state.indexOf(options.value) !== -1;
}

var useCheckbox = createHook.createHook({
  name: "Checkbox",
  compose: Tabbable.useTabbable,
  useState: CheckboxState.useCheckboxState,
  keys: ["value", "checked"],
  useOptions: function useOptions(_ref) {
    var _ref$unstable_clickOn = _ref.unstable_clickOnEnter,
        unstable_clickOnEnter = _ref$unstable_clickOn === void 0 ? false : _ref$unstable_clickOn,
        options = _rollupPluginBabelHelpers._objectWithoutPropertiesLoose(_ref, ["unstable_clickOnEnter"]);

    return _rollupPluginBabelHelpers._objectSpread2({
      unstable_clickOnEnter: unstable_clickOnEnter
    }, options);
  },
  useProps: function useProps(options, _ref2) {
    var htmlRef = _ref2.ref,
        htmlOnChange = _ref2.onChange,
        htmlOnClick = _ref2.onClick,
        htmlProps = _rollupPluginBabelHelpers._objectWithoutPropertiesLoose(_ref2, ["ref", "onChange", "onClick"]);

    var ref = React.useRef(null);
    var checked = getChecked(options);
    var setDelayedEvent = useDelayedEvent(htmlOnChange);
    useIndeterminateState(ref, options);
    var onChange = React.useCallback(function (event) {
      var state = options.state,
          value = options.value,
          setState = options.setState,
          disabled = options.disabled;
      if (disabled) return;

      if (htmlOnChange) {
        setDelayedEvent(event);
      }

      if (!setState) return;
      var isBoolean = typeof value === "undefined";

      if (isBoolean) {
        setState(!checked);
      } else {
        var array = Array.isArray(state) ? state : [];
        var index = array.indexOf(value);

        if (index === -1) {
          setState([].concat(array, [value]));
        } else {
          setState(removeIndexFromArray.removeIndexFromArray(array, index));
        }
      }
    }, [htmlOnChange, checked, options.disabled, options.setState, options.state, options.value]);
    var onClick = React.useCallback(function (event) {
      if (event.target instanceof HTMLInputElement) return;
      onChange(event);
    }, [onChange]);
    return _rollupPluginBabelHelpers._objectSpread2({
      ref: mergeRefs.mergeRefs(ref, htmlRef),
      checked: checked,
      "aria-checked": options.state === "indeterminate" ? "mixed" : checked,
      value: options.value,
      role: "checkbox",
      type: "checkbox",
      onChange: onChange,
      onClick: useAllCallbacks.useAllCallbacks(onClick, htmlOnClick)
    }, htmlProps);
  }
});
var Checkbox = createComponent.createComponent({
  as: "input",
  useHook: useCheckbox
});

exports.Checkbox = Checkbox;
exports.useCheckbox = useCheckbox;
