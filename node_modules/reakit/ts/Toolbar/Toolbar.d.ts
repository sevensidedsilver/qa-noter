/// <reference types="react" />
import { unstable_IdGroupOptions, unstable_IdGroupHTMLProps } from "../Id/IdGroup";
import { ToolbarStateReturn } from "./ToolbarState";
export declare type ToolbarOptions = unstable_IdGroupOptions & Pick<Partial<ToolbarStateReturn>, "orientation">;
export declare type ToolbarHTMLProps = unstable_IdGroupHTMLProps;
export declare type ToolbarProps = ToolbarOptions & ToolbarHTMLProps;
export declare const useToolbar: {
    (options?: ToolbarOptions | undefined, htmlProps?: import("..").BoxHTMLProps | undefined): import("..").BoxHTMLProps;
    __keys: readonly any[];
    __useOptions: (options: ToolbarOptions, htmlProps: import("..").BoxHTMLProps) => ToolbarOptions;
    __propsAreEqual?: ((prev: import("..").BoxOptions & Pick<Partial<import("..").unstable_IdStateReturn>, "baseId" | "unstable_idCountRef" | "unstable_setBaseId"> & {
        id?: string | undefined;
    } & Pick<Partial<import("..").RoverStateReturn>, "orientation"> & import("react").HTMLAttributes<any> & import("react").RefAttributes<any> & {
        unstable_wrap?: ((children: import("react").ReactNode) => JSX.Element) | undefined;
    }, next: import("..").BoxOptions & Pick<Partial<import("..").unstable_IdStateReturn>, "baseId" | "unstable_idCountRef" | "unstable_setBaseId"> & {
        id?: string | undefined;
    } & Pick<Partial<import("..").RoverStateReturn>, "orientation"> & import("react").HTMLAttributes<any> & import("react").RefAttributes<any> & {
        unstable_wrap?: ((children: import("react").ReactNode) => JSX.Element) | undefined;
    }) => boolean) | undefined;
};
export declare const Toolbar: import("reakit-system/src/createComponent").Component<"div", ToolbarOptions>;
