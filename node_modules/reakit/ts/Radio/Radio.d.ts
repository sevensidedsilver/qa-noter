import * as React from "react";
import { RoverOptions, RoverHTMLProps } from "../Rover/Rover";
import { RadioStateReturn } from "./RadioState";
export declare type RadioOptions = RoverOptions & Pick<Partial<RadioStateReturn>, "state" | "setState"> & {
    /**
     * Same as the `value` attribute.
     */
    value: any;
    /**
     * Same as the `checked` attribute.
     */
    checked?: boolean;
};
export declare type RadioHTMLProps = RoverHTMLProps & React.InputHTMLAttributes<any>;
export declare type RadioProps = RadioOptions & RadioHTMLProps;
export declare const useRadio: {
    (options?: RadioOptions | undefined, htmlProps?: RadioHTMLProps | undefined): RadioHTMLProps;
    __keys: readonly any[];
    __useOptions: (options: RadioOptions, htmlProps: RadioHTMLProps) => RadioOptions;
    __propsAreEqual?: ((prev: import("..").BoxOptions & {
        disabled?: boolean | undefined;
        focusable?: boolean | undefined;
        unstable_clickOnEnter?: boolean | undefined;
        unstable_clickOnSpace?: boolean | undefined;
    } & Pick<Partial<import("..").unstable_IdStateReturn>, "baseId" | "unstable_idCountRef"> & {
        id?: string | undefined;
    } & Pick<Partial<import("..").RoverStateReturn>, "orientation" | "unstable_moves"> & Pick<import("..").RoverStateReturn, "move" | "first" | "last" | "currentId" | "stops" | "register" | "unregister" | "next" | "previous"> & {
        stopId?: string | undefined;
    } & Pick<Partial<RadioStateReturn>, "state" | "setState"> & {
        /**
         * Same as the `value` attribute.
         */
        value: any;
        /**
         * Same as the `checked` attribute.
         */
        checked?: boolean | undefined;
    } & React.HTMLAttributes<any> & React.RefAttributes<any> & {
        unstable_wrap?: ((children: React.ReactNode) => JSX.Element) | undefined;
    } & {
        disabled?: boolean | undefined;
    } & React.InputHTMLAttributes<any>, next: import("..").BoxOptions & {
        disabled?: boolean | undefined;
        focusable?: boolean | undefined;
        unstable_clickOnEnter?: boolean | undefined;
        unstable_clickOnSpace?: boolean | undefined;
    } & Pick<Partial<import("..").unstable_IdStateReturn>, "baseId" | "unstable_idCountRef"> & {
        id?: string | undefined;
    } & Pick<Partial<import("..").RoverStateReturn>, "orientation" | "unstable_moves"> & Pick<import("..").RoverStateReturn, "move" | "first" | "last" | "currentId" | "stops" | "register" | "unregister" | "next" | "previous"> & {
        stopId?: string | undefined;
    } & Pick<Partial<RadioStateReturn>, "state" | "setState"> & {
        /**
         * Same as the `value` attribute.
         */
        value: any;
        /**
         * Same as the `checked` attribute.
         */
        checked?: boolean | undefined;
    } & React.HTMLAttributes<any> & React.RefAttributes<any> & {
        unstable_wrap?: ((children: React.ReactNode) => JSX.Element) | undefined;
    } & {
        disabled?: boolean | undefined;
    } & React.InputHTMLAttributes<any>) => boolean) | undefined;
};
export declare const Radio: import("reakit-system/src/createComponent").Component<"input", RadioOptions>;
