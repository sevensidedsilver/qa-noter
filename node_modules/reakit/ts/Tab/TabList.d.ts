/// <reference types="react" />
import { unstable_IdGroupOptions, unstable_IdGroupHTMLProps } from "../Id/IdGroup";
import { TabStateReturn } from "./TabState";
export declare type TabListOptions = unstable_IdGroupOptions & Pick<Partial<TabStateReturn>, "orientation">;
export declare type TabListHTMLProps = unstable_IdGroupHTMLProps;
export declare type TabListProps = TabListOptions & TabListHTMLProps;
export declare const useTabList: {
    (options?: TabListOptions | undefined, htmlProps?: import("..").BoxHTMLProps | undefined): import("..").BoxHTMLProps;
    __keys: readonly any[];
    __useOptions: (options: TabListOptions, htmlProps: import("..").BoxHTMLProps) => TabListOptions;
    __propsAreEqual?: ((prev: import("..").BoxOptions & Pick<Partial<import("..").unstable_IdStateReturn>, "baseId" | "unstable_idCountRef" | "unstable_setBaseId"> & {
        id?: string | undefined;
    } & Pick<Partial<TabStateReturn>, "orientation"> & import("react").HTMLAttributes<any> & import("react").RefAttributes<any> & {
        unstable_wrap?: ((children: import("react").ReactNode) => JSX.Element) | undefined;
    }, next: import("..").BoxOptions & Pick<Partial<import("..").unstable_IdStateReturn>, "baseId" | "unstable_idCountRef" | "unstable_setBaseId"> & {
        id?: string | undefined;
    } & Pick<Partial<TabStateReturn>, "orientation"> & import("react").HTMLAttributes<any> & import("react").RefAttributes<any> & {
        unstable_wrap?: ((children: import("react").ReactNode) => JSX.Element) | undefined;
    }) => boolean) | undefined;
};
export declare const TabList: import("reakit-system/src/createComponent").Component<"div", TabListOptions>;
