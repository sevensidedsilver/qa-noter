import * as React from "react";
import { BoxOptions, BoxHTMLProps } from "../Box/Box";
import { unstable_IdStateReturn } from "./IdState";
export declare type unstable_IdGroupOptions = BoxOptions & Pick<Partial<unstable_IdStateReturn>, "baseId" | "unstable_setBaseId" | "unstable_idCountRef"> & {
    /**
     * Same as the HTML attribute.
     */
    id?: string;
};
export declare type unstable_IdGroupHTMLProps = BoxHTMLProps;
export declare type unstable_IdGroupProps = unstable_IdGroupOptions & unstable_IdGroupHTMLProps;
export declare const unstable_useIdGroup: {
    (options?: unstable_IdGroupOptions | undefined, htmlProps?: BoxHTMLProps | undefined): BoxHTMLProps;
    __keys: readonly any[];
    __useOptions: (options: unstable_IdGroupOptions, htmlProps: BoxHTMLProps) => unstable_IdGroupOptions;
    __propsAreEqual?: ((prev: BoxOptions & Pick<Partial<unstable_IdStateReturn>, "baseId" | "unstable_idCountRef" | "unstable_setBaseId"> & {
        /**
         * Same as the HTML attribute.
         */
        id?: string | undefined;
    } & React.HTMLAttributes<any> & React.RefAttributes<any> & {
        unstable_wrap?: ((children: React.ReactNode) => JSX.Element) | undefined;
    }, next: BoxOptions & Pick<Partial<unstable_IdStateReturn>, "baseId" | "unstable_idCountRef" | "unstable_setBaseId"> & {
        /**
         * Same as the HTML attribute.
         */
        id?: string | undefined;
    } & React.HTMLAttributes<any> & React.RefAttributes<any> & {
        unstable_wrap?: ((children: React.ReactNode) => JSX.Element) | undefined;
    }) => boolean) | undefined;
};
export declare const unstable_IdGroup: import("reakit-system/src/createComponent").Component<"div", unstable_IdGroupOptions>;
