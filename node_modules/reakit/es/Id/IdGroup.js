import { useContext, useState } from 'react';
import { unstable_IdContext } from './IdProvider.js';
import { createComponent } from 'reakit-system/createComponent';
import { createHook } from 'reakit-system/createHook';
import { useBox } from '../Box/Box.js';
import { a as _objectSpread2 } from '../_rollupPluginBabelHelpers-9b9ba5c9.js';
import 'reakit-utils/useSealedState';
import { unstable_useIdState } from './IdState.js';

var unstable_useIdGroup = createHook({
  name: "IdGroup",
  compose: useBox,
  useState: unstable_useIdState,
  useOptions: function useOptions(options, htmlProps) {
    var generateId = useContext(unstable_IdContext);

    var _React$useState = useState(function () {
      return htmlProps.id || options.id || options.baseId || generateId();
    }),
        baseId = _React$useState[0]; // If there's useIdState and IdGroup has received a different id, then set
    // the baseId on the state.


    if (options.unstable_setBaseId && baseId !== options.baseId) {
      options.unstable_setBaseId(baseId);
    }

    return _objectSpread2({}, options, {
      baseId: baseId
    });
  }
});
var unstable_IdGroup = createComponent({
  as: "div",
  useHook: unstable_useIdGroup
});

export { unstable_IdGroup, unstable_useIdGroup };
