declare type Hook<O = any, P = any> = {
    (options?: O, htmlProps?: P): P;
    __keys: ReadonlyArray<any>;
    __useOptions: (options: O, htmlProps: P) => O;
    __propsAreEqual?: (prev: O & P, next: O & P) => boolean;
};
declare type CreateHookOptions<O, P> = {
    name?: string;
    compose?: Hook | Hook[];
    useState?: {
        (): any;
        __keys: ReadonlyArray<any>;
    };
    useOptions?: (options: O, htmlProps: P) => O;
    useProps?: (options: O, htmlProps: P) => P;
    useComposeOptions?: (options: O, htmlProps: P) => O;
    propsAreEqual?: (prev: O & P, next: O & P) => boolean | undefined | null;
    keys?: ReadonlyArray<keyof O>;
};
export declare function createHook<O, P>(options: CreateHookOptions<O, P>): Hook<O, P>;
export {};
