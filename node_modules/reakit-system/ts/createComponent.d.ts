import * as React from "react";
import { As, PropsWithAs } from "reakit-utils/types";
import { useCreateElement as defaultUseCreateElement } from "./useCreateElement";
declare type BoxHTMLProps = React.HTMLAttributes<any> & React.RefAttributes<any> & {
    unstable_wrap?: (children: React.ReactNode) => JSX.Element;
};
declare type Hook<O> = {
    (options?: O, props?: BoxHTMLProps): BoxHTMLProps;
    __keys?: ReadonlyArray<any>;
    __propsAreEqual?: (prev: O, next: O) => boolean;
};
declare type Options<T extends As, O> = {
    as: T;
    useHook?: Hook<O>;
    keys?: ReadonlyArray<any>;
    propsAreEqual?: (prev: O, next: O) => boolean;
    useCreateElement?: typeof defaultUseCreateElement;
};
export interface Component<T extends As, O> {
    <TT extends As>(props: PropsWithAs<O, TT> & {
        as: TT;
    }): JSX.Element;
    (props: PropsWithAs<O, T>): JSX.Element;
}
export declare function createComponent<T extends As, O>({ as: type, useHook, keys, propsAreEqual, useCreateElement }: Options<T, O>): Component<T, O>;
export {};
