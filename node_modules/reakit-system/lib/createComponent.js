'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
require('./SystemContext.js');
var _rollupPluginBabelHelpers = require('./_rollupPluginBabelHelpers-a1eb266e.js');
var useCreateElement = require('./useCreateElement.js');
var splitProps = require('reakit-utils/splitProps');

function memo(component, propsAreEqual) {
  return React.memo(component, propsAreEqual);
}

function forwardRef(component) {
  return React.forwardRef(component);
}

function createComponent(_ref) {
  var type = _ref.as,
      useHook = _ref.useHook,
      _ref$keys = _ref.keys,
      keys = _ref$keys === void 0 ? useHook && useHook.__keys || [] : _ref$keys,
      _ref$propsAreEqual = _ref.propsAreEqual,
      propsAreEqual = _ref$propsAreEqual === void 0 ? useHook && useHook.__propsAreEqual : _ref$propsAreEqual,
      _ref$useCreateElement = _ref.useCreateElement,
      useCreateElement$1 = _ref$useCreateElement === void 0 ? useCreateElement.useCreateElement : _ref$useCreateElement;

  var Comp = function Comp(_ref2, ref) {
    var _ref2$as = _ref2.as,
        as = _ref2$as === void 0 ? type : _ref2$as,
        props = _rollupPluginBabelHelpers._objectWithoutPropertiesLoose(_ref2, ["as"]);

    if (useHook) {
      var _splitProps = splitProps.splitProps(props, keys),
          _options = _splitProps[0],
          htmlProps = _splitProps[1];

      var _useHook = useHook(_options, _rollupPluginBabelHelpers._objectSpread2({
        ref: ref
      }, htmlProps)),
          unstable_wrap = _useHook.unstable_wrap,
          elementProps = _rollupPluginBabelHelpers._objectWithoutPropertiesLoose(_useHook, ["unstable_wrap"]); // @ts-ignore


      var asKeys = as.render ? as.render.__keys : as.__keys;
      var asOptions = asKeys ? splitProps.splitProps(props, asKeys)[0] : {};
      var element = useCreateElement$1(as, _rollupPluginBabelHelpers._objectSpread2({}, elementProps, {}, asOptions));

      if (unstable_wrap) {
        return unstable_wrap(element);
      }

      return element;
    }

    return useCreateElement$1(as, props);
  };

  Comp.__keys = keys;

  if (process.env.NODE_ENV !== "production" && useHook) {
    Comp.displayName = useHook.name.replace(/^(unstable_)?use/, "");
  }

  return memo(forwardRef(Comp), propsAreEqual);
}

exports.createComponent = createComponent;
