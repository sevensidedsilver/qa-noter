'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var selector = "input, select, textarea, a[href], button, [tabindex], audio[controls], video[controls], [contenteditable]:not([contenteditable=false])";

function isHTMLElement(element) {
  return element instanceof HTMLElement;
}

function isDisabled(element) {
  return Boolean(element.disabled);
}

function hasTabIndex(element) {
  return element.hasAttribute("tabindex");
}

function hasNegativeTabIndex(element) {
  return hasTabIndex(element) && element.tabIndex < 0;
}

function isHidden(element) {
  if (element.parentElement && isHidden(element.parentElement)) return true;
  return element.hidden;
}

function isContentEditable(element) {
  var value = element.getAttribute("contenteditable");
  return value !== "false" && value != null;
}

function isFocusable(element) {
  if (!isHTMLElement(element)) return false;
  if (isHidden(element)) return false;
  if (isDisabled(element)) return false;
  var localName = element.localName;
  var focusableTags = ["input", "select", "textarea", "button"];
  if (focusableTags.indexOf(localName) >= 0) return true;
  var others = {
    a: function a() {
      return element.hasAttribute("href");
    },
    audio: function audio() {
      return element.hasAttribute("controls");
    },
    video: function video() {
      return element.hasAttribute("controls");
    }
  };

  if (localName in others) {
    return others[localName]();
  }

  if (isContentEditable(element)) return true;
  return hasTabIndex(element);
}
function isTabbable(element) {
  return isHTMLElement(element) && isFocusable(element) && !hasNegativeTabIndex(element);
}
function getAllFocusableIn(container) {
  var allFocusable = Array.from(container.querySelectorAll(selector));
  allFocusable.unshift(container);
  return allFocusable.filter(isFocusable);
}
function getFirstFocusableIn(container) {
  var allFocusable = getAllFocusableIn(container);
  return allFocusable.length ? allFocusable[0] : null;
}
function getAllTabbableIn(container, fallbackToFocusable) {
  var allFocusable = Array.from(container.querySelectorAll(selector));
  var allTabbable = allFocusable.filter(isTabbable);

  if (isTabbable(container)) {
    allTabbable.unshift(container);
  }

  if (!allTabbable.length && fallbackToFocusable) {
    return allFocusable;
  }

  return allTabbable;
}
function getFirstTabbableIn(container, fallbackToFocusable) {
  var _getAllTabbableIn = getAllTabbableIn(container, fallbackToFocusable),
      first = _getAllTabbableIn[0];

  return first || null;
}
function getLastTabbableIn(container, fallbackToFocusable) {
  var allTabbable = getAllTabbableIn(container, fallbackToFocusable);
  return allTabbable[allTabbable.length - 1] || null;
}
function getNextTabbableIn(container, fallbackToFocusable) {
  var allFocusable = getAllFocusableIn(container);
  var index = allFocusable.indexOf(document.activeElement);
  var slice = allFocusable.slice(index + 1);
  return slice.find(isTabbable) || allFocusable.find(isTabbable) || (fallbackToFocusable ? slice[0] : null);
}
function getPreviousTabbableIn(container, fallbackToFocusable) {
  var allFocusable = getAllFocusableIn(container).reverse();
  var index = allFocusable.indexOf(document.activeElement);
  var slice = allFocusable.slice(index + 1);
  return slice.find(isTabbable) || allFocusable.find(isTabbable) || (fallbackToFocusable ? slice[0] : null);
}
function focusNextTabbableIn(container, fallbackToFocusable) {
  var nextTabbable = getNextTabbableIn(container, fallbackToFocusable);

  if (nextTabbable && isHTMLElement(nextTabbable)) {
    nextTabbable.focus();
  }
}
function focusPreviousTabbableIn(container, fallbackToFocusable) {
  var previousTabbable = getPreviousTabbableIn(container, fallbackToFocusable);

  if (previousTabbable && isHTMLElement(previousTabbable)) {
    previousTabbable.focus();
  }
}

function defaultIsActive(element) {
  return document.activeElement === element;
}

function ensureFocus(element, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$isActive = _ref.isActive,
      isActive = _ref$isActive === void 0 ? defaultIsActive : _ref$isActive,
      preventScroll = _ref.preventScroll;

  if (isActive(element)) return -1;
  element.focus({
    preventScroll: preventScroll
  });
  if (isActive(element)) return -1;
  return requestAnimationFrame(function () {
    element.focus({
      preventScroll: preventScroll
    });
  });
}

exports.ensureFocus = ensureFocus;
exports.focusNextTabbableIn = focusNextTabbableIn;
exports.focusPreviousTabbableIn = focusPreviousTabbableIn;
exports.getAllFocusableIn = getAllFocusableIn;
exports.getAllTabbableIn = getAllTabbableIn;
exports.getFirstFocusableIn = getFirstFocusableIn;
exports.getFirstTabbableIn = getFirstTabbableIn;
exports.getLastTabbableIn = getLastTabbableIn;
exports.getNextTabbableIn = getNextTabbableIn;
exports.getPreviousTabbableIn = getPreviousTabbableIn;
exports.isFocusable = isFocusable;
exports.isTabbable = isTabbable;
