'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var isObject = require('./isObject.js');

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

var jestSerializerStripFunctions = {
  test: function test(val) {
    return isObject.isObject(val) && !Array.isArray(val) && Object.values(val).find(function (v) {
      return typeof v === "function";
    });
  },
  print: function print(val, serialize) {
    return serialize(Object.keys(val).filter(function (key) {
      return typeof val[key] !== "function";
    }).reduce(function (acc, curr) {
      var _objectSpread2$1;

      return _objectSpread2({}, acc, (_objectSpread2$1 = {}, _objectSpread2$1[curr] = val[curr], _objectSpread2$1));
    }, {}));
  }
};

exports.jestSerializerStripFunctions = jestSerializerStripFunctions;
