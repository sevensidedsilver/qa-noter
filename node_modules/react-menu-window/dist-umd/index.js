(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('reakit/Portal')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', 'reakit/Portal'], factory) :
  (global = global || self, factory(global.MenuWindow = {}, global.React, global.Portal));
}(this, (function (exports, React, Portal) { 'use strict';

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(source, true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(source).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _newArrowCheck(innerThis, boundThis) {
    if (innerThis !== boundThis) {
      throw new TypeError("Cannot instantiate an arrow function");
    }
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
      return;
    }

    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  function useAnimationFrame(update) {
    var _this = this;

    var pause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var deps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var latestAnimationFrame = React.useRef(null);
    React.useEffect(function () {
      var _this2 = this;

      _newArrowCheck(this, _this);

      if (typeof pause === "function" ? pause() : pause) {
        return;
      }

      latestAnimationFrame.current = requestAnimationFrame(function () {
        _newArrowCheck(this, _this2);

        update();
      }.bind(this));
      return function () {
        _newArrowCheck(this, _this2);

        if (latestAnimationFrame.current) {
          cancelAnimationFrame(latestAnimationFrame.current);
        }
      }.bind(this); // eslint-disable-next-line react-hooks/exhaustive-deps
    }.bind(this), [update, pause].concat(_toConsumableArray(deps)));
  }

  var _this = undefined;

  var fitsOnTop = function fitsOnTop(viewportOffset) {
    var _this2 = this;

    _newArrowCheck(this, _this);

    return function (elemRect) {
      _newArrowCheck(this, _this2);

      return elemRect.top > viewportOffset;
    }.bind(this);
  }.bind(undefined);
  var fitsOnBottom = function fitsOnBottom(viewportOffset) {
    var _this3 = this;

    _newArrowCheck(this, _this);

    return function (elemRect, viewportRect) {
      _newArrowCheck(this, _this3);

      return elemRect.bottom < viewportRect.height - viewportOffset;
    }.bind(this);
  }.bind(undefined);
  var fitsOnLeft = function fitsOnLeft(viewportOffset) {
    var _this4 = this;

    _newArrowCheck(this, _this);

    return function (elemRect) {
      _newArrowCheck(this, _this4);

      return elemRect.left > viewportOffset;
    }.bind(this);
  }.bind(undefined);
  var fitsOnRight = function fitsOnRight(viewportOffset) {
    var _this5 = this;

    _newArrowCheck(this, _this);

    return function (elemRect, viewportRect) {
      _newArrowCheck(this, _this5);

      return elemRect.right < viewportRect.width - viewportOffset;
    }.bind(this);
  }.bind(undefined);
  var fitsInViewport = function fitsInViewport(viewportOffset) {
    var _this6 = this;

    _newArrowCheck(this, _this);

    return function (elemRect) {
      _newArrowCheck(this, _this6);

      if (elemRect.width === 0 || elemRect.height === 0) {
        return true;
      }

      var viewportRect = {
        width: window.innerWidth,
        height: window.innerHeight
      };
      return fitsOnTop(viewportOffset)(elemRect) && fitsOnBottom(viewportOffset)(elemRect, viewportRect) && fitsOnLeft(viewportOffset)(elemRect) && fitsOnRight(viewportOffset)(elemRect, viewportRect);
    }.bind(this);
  }.bind(undefined);
  var getFitOffsets = function getFitOffsets(viewportOffset) {
    var _this7 = this;

    _newArrowCheck(this, _this);

    return function (elemRect) {
      _newArrowCheck(this, _this7);

      var viewportRect = {
        width: window.innerWidth,
        height: window.innerHeight
      };
      var offsets = {
        x: 0,
        y: 0
      };

      if (!fitsOnRight(viewportOffset)(elemRect, viewportRect)) {
        offsets.x = viewportRect.width - viewportOffset - elemRect.right;
      }

      if (!fitsOnBottom(viewportOffset)(elemRect, viewportRect)) {
        offsets.y = viewportRect.height - viewportOffset - elemRect.bottom;
      }

      return offsets;
    }.bind(this);
  }.bind(undefined);

  var DEFAULT_POSITION = {
    top: 0,
    left: 0
  };
  function useFitInViewport(elemRef, targetPos) {
    var _this = this;

    var viewportOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    var _React$useState = React.useState(targetPos),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        style = _React$useState2[0],
        setStyle = _React$useState2[1];

    React.useEffect(function () {
      _newArrowCheck(this, _this);

      setStyle(targetPos);
    }.bind(this), [targetPos]);
    useAnimationFrame(function () {
      var _this2 = this;

      _newArrowCheck(this, _this);

      if (!elemRef.current) {
        return;
      }

      var _getFitOffsets = getFitOffsets(viewportOffset)(elemRef.current.getBoundingClientRect()),
          x = _getFitOffsets.x,
          y = _getFitOffsets.y;

      setStyle(function (prevStyle) {
        _newArrowCheck(this, _this2);

        var nextStyle = {
          top: (prevStyle || DEFAULT_POSITION).top + y,
          left: (prevStyle || DEFAULT_POSITION).left + x
        };
        return nextStyle;
      }.bind(this));
    }.bind(this), function () {
      _newArrowCheck(this, _this);

      return !elemRef.current;
    }.bind(this), [style]);
    return {
      style: style
    };
  }

  var _this$1 = undefined;

  var setEventListeners = function setEventListeners(events, fn, elem, set) {
    var _this2 = this;

    _newArrowCheck(this, _this$1);

    events.forEach(function (event) {
      _newArrowCheck(this, _this2);

      (set === "add" ? elem.addEventListener : elem.removeEventListener)(event, fn, {
        capture: true,
        passive: true
      });
    }.bind(this));
  }.bind(undefined);

  function useAttachEventListeners(elem, events, cb) {
    var _this3 = this;

    React.useEffect(function () {
      var _this4 = this;

      _newArrowCheck(this, _this3);

      if (!elem) {
        return;
      }

      setEventListeners(events, cb, elem, "add");
      return function () {
        _newArrowCheck(this, _this4);

        setEventListeners(events, cb, elem, "remove");
      }.bind(this);
    }.bind(this), [cb, elem, events]);
  }

  var _this$2 = undefined;

  var GET_POSITION_DEFAULT = function GET_POSITION_DEFAULT(e) {
    _newArrowCheck(this, _this$2);

    return {
      top: e.pageY,
      left: e.pageX
    };
  }.bind(undefined);

  var HIDE_ON_DEFAULT = "resize contextmenu mousedown click scroll keydown";

  var SHOULD_OPEN_DEFAULT = function SHOULD_OPEN_DEFAULT() {
    _newArrowCheck(this, _this$2);

    return true;
  }.bind(undefined);

  function MenuWindow(_ref) {
    var _this2 = this;

    var children = _ref.children,
        _ref$getPosition = _ref.getPosition,
        getPosition = _ref$getPosition === void 0 ? GET_POSITION_DEFAULT : _ref$getPosition,
        _ref$hideOn = _ref.hideOn,
        hideOn = _ref$hideOn === void 0 ? HIDE_ON_DEFAULT : _ref$hideOn,
        render = _ref.render,
        _ref$shouldOpen = _ref.shouldOpen,
        shouldOpen = _ref$shouldOpen === void 0 ? SHOULD_OPEN_DEFAULT : _ref$shouldOpen,
        onOpen = _ref.onOpen,
        onClose = _ref.onClose,
        _ref$viewportOffset = _ref.viewportOffset,
        viewportOffset = _ref$viewportOffset === void 0 ? 8 : _ref$viewportOffset;
    var latestEvent = React.useRef(null);

    var _React$useState = React.useState(null),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        pos = _React$useState2[0],
        setPos = _React$useState2[1];

    var contentRef = React.useRef(null);
    var openWindow = React.useCallback(function (e) {
      _newArrowCheck(this, _this2);

      onOpen && onOpen(e);
      setPos(getPosition(e));
    }.bind(this), [onOpen, setPos, getPosition]);
    var closeWindow = React.useCallback(function (e) {
      _newArrowCheck(this, _this2);

      setPos(null);
      onClose && onClose(e);
    }.bind(this), [setPos, onClose]);
    var handleContextMenu = React.useCallback(function (e) {
      _newArrowCheck(this, _this2);

      e.preventDefault();
      e.stopPropagation();
      e.persist();
      latestEvent.current = e;

      if (shouldOpen()) {
        openWindow(e);
      }
    }.bind(this), [shouldOpen, openWindow]);
    var handleClose = React.useCallback(function (e) {
      _newArrowCheck(this, _this2);

      /**
       * Ignore all hideOn events if they're triggered on the content element or any of its children.
       */
      if (!contentRef.current || e.target !== contentRef.current && !contentRef.current.contains(e.target)) {
        closeWindow(e);
      }
    }.bind(this), [contentRef, closeWindow]);
    useAttachEventListeners(pos ? window : null, hideOn.split(" "), handleClose);
    var renderedContent = latestEvent.current && pos ? render(latestEvent.current, {
      close: function close() {
        _newArrowCheck(this, _this2);

        return setPos(null);
      }.bind(this)
    }) : null;

    var _useFitInViewport = useFitInViewport(contentRef, pos, viewportOffset),
        contentStyles = _useFitInViewport.style;

    return React.createElement(React.Fragment, null, React.cloneElement(React.Children.only(children), {
      onContextMenu: handleContextMenu
    }), renderedContent ? React.createElement(Portal.Portal, null, React.cloneElement(renderedContent, {
      ref: contentRef,
      style: _objectSpread2({}, renderedContent.props.style, {
        position: "absolute"
      }, contentStyles)
    })) : null);
  }

  exports.MenuWindow = MenuWindow;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
